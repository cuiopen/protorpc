// Code generated by protoc-gen-go.
// source: arith.proto
// DO NOT EDIT!

package service

import proto "encoding/protobuf/proto"
import json "encoding/json"
import math "math"

import "io"
import "net"
import "net/rpc"
import "net/rpc/protorpc"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type ArithRequest struct {
	A                *int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B                *int32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ArithRequest) Reset()         { *m = ArithRequest{} }
func (m *ArithRequest) String() string { return proto.CompactTextString(m) }
func (*ArithRequest) ProtoMessage()    {}

func (m *ArithRequest) GetA() int32 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

func (m *ArithRequest) GetB() int32 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

type ArithResponse struct {
	C                *int32 `protobuf:"varint,1,opt,name=c" json:"c,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ArithResponse) Reset()         { *m = ArithResponse{} }
func (m *ArithResponse) String() string { return proto.CompactTextString(m) }
func (*ArithResponse) ProtoMessage()    {}

func (m *ArithResponse) GetC() int32 {
	if m != nil && m.C != nil {
		return *m.C
	}
	return 0
}

func init() {
}

type ArithService interface {
	Add(in *ArithRequest, out *ArithResponse) error
	Mul(in *ArithRequest, out *ArithResponse) error
	Div(in *ArithRequest, out *ArithResponse) error
	Error(in *ArithRequest, out *ArithResponse) error
}

// RegisterArithService publish the given ArithService implementation on the server.
func RegisterArithService(srv *rpc.Server, x ArithService) error {
	if err := srv.RegisterName("ArithService", x); err != nil {
		return err
	}
	return nil
}

// ServeArithService serves the given ArithService implementation on conn.
func ServeArithService(conn io.ReadWriteCloser, x ArithService) error {
	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithService", x); err != nil {
		return err
	}
	srv.ServeCodec(protorpc.NewServerCodec(conn))
	return nil
}

// ListenAndServeArithService listen announces on the local network address laddr
// and serves the given ArithService implementation.
func ListenAndServeArithService(network, addr string, x ArithService) error {
	clients, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithService", x); err != nil {
		return err
	}
	for {
		conn, err := clients.Accept()
		if err != nil {
			return err
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
	panic("unreachable")
}

type rpcArithServiceStub struct {
	*rpc.Client
}

func (c *rpcArithServiceStub) Add(in *ArithRequest, out *ArithResponse) error {
	return c.Call("ArithService.Add", in, out)
}
func (c *rpcArithServiceStub) Mul(in *ArithRequest, out *ArithResponse) error {
	return c.Call("ArithService.Mul", in, out)
}
func (c *rpcArithServiceStub) Div(in *ArithRequest, out *ArithResponse) error {
	return c.Call("ArithService.Div", in, out)
}
func (c *rpcArithServiceStub) Error(in *ArithRequest, out *ArithResponse) error {
	return c.Call("ArithService.Error", in, out)
}

// DialArithService connects to an ArithService at the specified network address.
func DialArithService(network, addr string) (*rpc.Client, ArithService, error) {
	conn, err := net.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	c, srv := NewArithServiceClient(conn)
	return c, srv, nil
}

// NewArithServiceClient returns a ArithService rpc.Client and stub to handle
// requests to the set of ArithService at the other end of the connection.
func NewArithServiceClient(conn io.ReadWriteCloser) (*rpc.Client, ArithService) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return c, &rpcArithServiceStub{c}
}

// NewArithServiceStub returns a ArithService stub to handle rpc.Client.
func NewArithServiceStub(c *rpc.Client) ArithService {
	return &rpcArithServiceStub{c}
}
